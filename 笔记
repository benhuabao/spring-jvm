1:JDK , JRE ,JVM的关系
2:类加载机制的作用和过程
3:运行时数据块分那几块,分别有那些作用

1:
    1)jdk就是Java的开发工具包,里面有构成jre的应用程序,库文件,还有Java的编译工具,帮助文档,源码等东西
    2)jre就是Java程序的运行环境,包含类库和jvm要的东西,只能跑不能编译Java文件
    2)jvm就是Java虚拟机,运行Java可执行文件和内存空间等.
    jdk>jre>jvm 

2:
    类加载的作用和过程
    Loading
        1)Class文件到->字节流->类加载器
        2)字节流->类静态数据结构->方法区
        3)字节流->Class对象->堆
    Linking
        1)验证
            文件格式,字节码,符号引用关系等
        2)准备
            为类的静态变量进行内存分配病初始化当前类型的默认值
        3)解析
            将类的静态变量进行真正的初始化(引用到物理内存)在class文件中的就是符号引用,将其分配进了物理空间,
    Initializing
        为类的静态变量进行真正的初始化

3:运行时数据区域分为5块,其中常量池被分在方法区
    1)方法区:方法区存放的字段常量等,
    2)堆:主要存放的是实例对象
    3)Java虚拟机栈:栈里面都是一个个的栈帧,一个栈帧就是一个方法的执行,栈帧中主要执行的是Java方法,一个一个将方法
    压进去,先入后出,一个栈帧中又主要有,局部变量表,操作数栈,动态链接,方法返回地址,具体内容见后面
    4)本地栈:Java虚拟机栈 会通过动态连接去调用本地方法栈里面的native方法,本地栈都是native方法,是调用的C方法
    5)PC计数器:为了保存当前方法执行的顺序,保存临时执行位置

PS:
运行时数据区中,方法区和堆是和进程相关的,是线程共享的,,而Java虚拟栈和本地栈还有程序计数器是跟线程相关的,
Java是一个进程,当他执行起来的时候,会有很多的线程跑来跑去,执行各种的方法.
线程:
线程执行方法应该如何表示呢???
不妨在每一个线程中 有一个去执行方法的数据结构,
线程中会有一个数据结构 就叫做栈
执行Java方法就叫做Java虚拟机栈
当前线程调用方法,就会在我们的栈中压入各种数据..
调用了方法,就往栈里面压.遵循先进后出机制,其中一个方法的执行就是一个栈帧,站里面的内容就是一个一个的栈帧


程序计数器主要是为了保存当前方法执行的顺序,保存临时执行位置

Java虚拟机栈 会通过动态连接去调用本地方法栈里面的native方法
Navtive 方法是 Java 通过 JNI 直接调用本地 C/C++ 库

每一个栈帧里头有4个东西
1:动态链接
2:局部变量表 : 方法里面的局部变量需要一个表存起来,
3:方法返回地址 : 就是return ?
4:操作数栈 :方法中所有的数据操作,需要有临时保存的地方,就是操作数栈
